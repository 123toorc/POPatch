diff -uprN 4.14.79/fs/eventpoll.c 4.14.79_popcorn/fs/eventpoll.c
--- 4.14.79/fs/eventpoll.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/eventpoll.c	2020-05-24 22:41:30.450906427 -0400
@@ -44,6 +44,10 @@
 #include <linux/rculist.h>
 #include <net/busy_poll.h>
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/syscall_server.h>
+#include <popcorn/types.h>
+#endif
 /*
  * LOCKING:
  * There are three level of locking required by epoll :
@@ -1959,6 +1963,13 @@ SYSCALL_DEFINE1(epoll_create1, int, flag
 	struct eventpoll *ep = NULL;
 	struct file *file;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_epoll_create1(flags);
+		SSPRINTK("remote epoll_create ret: %d\n", error);
+		return error;
+	}
+#endif
 	/* Check the EPOLL_* constant for consistency.  */
 	BUILD_BUG_ON(EPOLL_CLOEXEC != O_CLOEXEC);
 
@@ -2020,6 +2031,13 @@ SYSCALL_DEFINE4(epoll_ctl, int, epfd, in
 	struct epoll_event epds;
 	struct eventpoll *tep = NULL;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_epoll_ctl(epfd, op, fd, event);
+		SSPRINTK("remote epoll_ctl ret: %d\n", error);
+		return error;
+	}
+#endif
 	error = -EFAULT;
 	if (ep_op_has_event(op) &&
 	    copy_from_user(&epds, event, sizeof(struct epoll_event)))
@@ -2172,6 +2190,13 @@ SYSCALL_DEFINE4(epoll_wait, int, epfd, s
 	struct fd f;
 	struct eventpoll *ep;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_epoll_wait(epfd, events, maxevents, timeout);
+		SSPRINTK("remote epoll_wait ret: %d\n", error);
+		return error;
+	}
+#endif
 	/* The maximum number of event must be greater than zero */
 	if (maxevents <= 0 || maxevents > EP_MAX_EVENTS)
 		return -EINVAL;
@@ -2218,6 +2243,14 @@ SYSCALL_DEFINE6(epoll_pwait, int, epfd,
 	int error;
 	sigset_t ksigmask, sigsaved;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_epoll_pwait(epfd, events, maxevents, timeout,
+					     sigmask, sigsetsize);
+		SSPRINTK("remote epoll_pwait ret: %d\n", error);
+		return error;
+	}
+#endif
 	/*
 	 * If the caller wants a certain signal mask to be set during the wait,
 	 * we apply it here.
diff -uprN 4.14.79/fs/fcntl.c 4.14.79_popcorn/fs/fcntl.c
--- 4.14.79/fs/fcntl.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/fcntl.c	2020-05-24 22:41:30.470906365 -0400
@@ -445,10 +445,22 @@ static int check_fcntl_cmd(unsigned cmd)
 	return 0;
 }
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/syscall_server.h>
+#endif
+
 SYSCALL_DEFINE3(fcntl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)
-{	
-	struct fd f = fdget_raw(fd);
+{
+	struct fd f;
 	long err = -EBADF;
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		err = redirect_fcntl(fd, cmd, arg);
+		return err;
+	}
+#endif
+	f = fdget_raw(fd);
 
 	if (!f.file)
 		goto out;
diff -uprN 4.14.79/fs/ioctl.c 4.14.79_popcorn/fs/ioctl.c
--- 4.14.79/fs/ioctl.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/ioctl.c	2020-05-24 22:41:30.486906315 -0400
@@ -22,6 +22,11 @@
 
 #include <asm/ioctls.h>
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/syscall_server.h>
+#endif
+
 /* So that the fiemap access checks can't overflow on 32 bit machines. */
 #define FIEMAP_MAX_EXTENTS	(UINT_MAX / sizeof(struct fiemap_extent))
 
@@ -692,7 +697,16 @@ int do_vfs_ioctl(struct file *filp, unsi
 SYSCALL_DEFINE3(ioctl, unsigned int, fd, unsigned int, cmd, unsigned long, arg)
 {
 	int error;
-	struct fd f = fdget(fd);
+	struct fd f;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_ioctl(fd, cmd, arg);
+		return error;
+	}
+#endif
+
+	f = fdget(fd);
 
 	if (!f.file)
 		return -EBADF;
diff -uprN 4.14.79/fs/open.c 4.14.79_popcorn/fs/open.c
--- 4.14.79/fs/open.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/open.c	2020-05-24 22:41:30.562906079 -0400
@@ -34,6 +34,11 @@
 
 #include "internal.h"
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/syscall_server.h>
+#include <popcorn/types.h>
+#endif
+
 int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
 	struct file *filp)
 {
@@ -1069,8 +1074,16 @@ long do_sys_open(int dfd, const char __u
 	return fd;
 }
 
+
 SYSCALL_DEFINE3(open, const char __user *, filename, int, flags, umode_t, mode)
 {
+	int ret;
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		ret = redirect_open(filename, flags, mode);
+		return ret;
+	}
+#endif
 	if (force_o_largefile())
 		flags |= O_LARGEFILE;
 
@@ -1152,7 +1165,15 @@ EXPORT_SYMBOL(filp_close);
  */
 SYSCALL_DEFINE1(close, unsigned int, fd)
 {
-	int retval = __close_fd(current->files, fd);
+	int retval;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		retval = redirect_close(fd);
+		return retval;
+	}
+#endif
+	retval = __close_fd(current->files, fd);
 
 	/* can't restart close syscall because file table entry was cleared */
 	if (unlikely(retval == -ERESTARTSYS ||
diff -uprN 4.14.79/fs/proc/base.c 4.14.79_popcorn/fs/proc/base.c
--- 4.14.79/fs/proc/base.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/proc/base.c	2020-05-24 22:41:30.566906066 -0400
@@ -96,6 +96,9 @@
 #ifdef CONFIG_HARDWALL
 #include <asm/hardwall.h>
 #endif
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#endif
 #include <trace/events/oom.h>
 #include "internal.h"
 #include "fd.h"
@@ -225,6 +228,12 @@ static ssize_t proc_pid_cmdline_read(str
 	tsk = get_proc_task(file_inode(file));
 	if (!tsk)
 		return -ESRCH;
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(tsk)) {
+		put_task_struct(tsk);
+		return 0;
+	}
+#endif
 	mm = get_task_mm(tsk);
 	put_task_struct(tsk);
 	if (!mm)
diff -uprN 4.14.79/fs/proc/meminfo.c 4.14.79_popcorn/fs/proc/meminfo.c
--- 4.14.79/fs/proc/meminfo.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/proc/meminfo.c	2020-05-24 22:41:30.566906066 -0400
@@ -19,6 +19,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include "internal.h"
+#ifdef CONFIG_POPCORN_REMOTE_INFO
+#include <popcorn/remote_meminfo.h>
+#endif
 
 void __attribute__((weak)) arch_report_meminfo(struct seq_file *m)
 {
@@ -51,7 +54,10 @@ static int meminfo_proc_show(struct seq_
 	long available;
 	unsigned long pages[NR_LRU_LISTS];
 	int lru;
-
+	
+	#ifdef CONFIG_POPCORN_REMOTE_INFO
+       		remote_mem_info_response_t rem_mem;
+	#endif
 	si_meminfo(&i);
 	si_swapinfo(&i);
 	committed = percpu_counter_read_positive(&vm_committed_as);
@@ -66,6 +72,8 @@ static int meminfo_proc_show(struct seq_
 
 	available = si_mem_available();
 
+#ifndef CONFIG_POPCORN_REMOTE_INFO
+
 	show_val_kb(m, "MemTotal:       ", i.totalram);
 	show_val_kb(m, "MemFree:        ", i.freeram);
 	show_val_kb(m, "MemAvailable:   ", available);
@@ -155,6 +163,98 @@ static int meminfo_proc_show(struct seq_
 		    global_zone_page_state(NR_FREE_CMA_PAGES));
 #endif
 
+#else //CONFIG_POPCORN_REMOTE_INFO
+
+	show_val_kb(m, "MemTotal:       ", i.totalram + rem_mem.MemTotal);
+	show_val_kb(m, "MemFree:        ", i.freeram + rem_mem.MemFree);
+	show_val_kb(m, "MemAvailable:   ", available + rem_mem.MemAvailable);
+	show_val_kb(m, "Buffers:        ", i.bufferram + rem_mem.Buffers);
+	show_val_kb(m, "Cached:         ", cached + rem_mem.Cached);
+	show_val_kb(m, "SwapCached:     ", total_swapcache_pages() + rem_mem.SwapCached);
+	show_val_kb(m, "Active:         ", pages[LRU_ACTIVE_ANON] +
+					   pages[LRU_ACTIVE_FILE] + rem_mem.Active);
+	show_val_kb(m, "Inactive:       ", pages[LRU_INACTIVE_ANON] +
+					   pages[LRU_INACTIVE_FILE] + rem_mem.Inactive);
+	show_val_kb(m, "Active(anon):   ", pages[LRU_ACTIVE_ANON] + rem_mem.Active_anon);
+	show_val_kb(m, "Inactive(anon): ", pages[LRU_INACTIVE_ANON] + rem_mem.Inactive.anon);
+	show_val_kb(m, "Active(file):   ", pages[LRU_ACTIVE_FILE] + rem_mem.Active_file);
+	show_val_kb(m, "Inactive(file): ", pages[LRU_INACTIVE_FILE] + rem_mem.Inactive_file);
+	show_val_kb(m, "Unevictable:    ", pages[LRU_UNEVICTABLE] + rem_mem.Unevictable);
+	show_val_kb(m, "Mlocked:        ", global_zone_page_state(NR_MLOCK) + rem_mem.Mlocked);
+
+#ifdef CONFIG_HIGHMEM
+	show_val_kb(m, "HighTotal:      ", i.totalhigh + rem_mem.HighTotal);
+	show_val_kb(m, "HighFree:       ", i.freehigh + rem_mem.HighFree);
+	show_val_kb(m, "LowTotal:       ", i.totalram - i.totalhigh + rem_mem.LowTotal);
+	show_val_kb(m, "LowFree:        ", i.freeram - i.freehigh + rem_mem.LowFree);
+#endif
+
+#ifndef CONFIG_MMU
+	show_val_kb(m, "MmapCopy:       ",
+		    (unsigned long)atomic_long_read(&mmap_pages_allocated) + rem_mem.MmapCopy);
+#endif
+
+	show_val_kb(m, "SwapTotal:      ", i.totalswap + rem_mem.SwapTotal);
+	show_val_kb(m, "SwapFree:       ", i.freeswap + rem_mem.SwapFree);
+	show_val_kb(m, "Dirty:          ",
+		    global_node_page_state(NR_FILE_DIRTY) + rem_mem.Dirty);
+	show_val_kb(m, "Writeback:      ",
+		    global_node_page_state(NR_WRITEBACK) + rem_mem.Writeback);
+	show_val_kb(m, "AnonPages:      ",
+		    global_node_page_state(NR_ANON_MAPPED) + rem_mem.AnonPages);
+	show_val_kb(m, "Mapped:         ",
+		    global_node_page_state(NR_FILE_MAPPED) + rem_mem.Mapped);
+	show_val_kb(m, "Shmem:          ", i.sharedram + rem_mem.Shmem);
+	show_val_kb(m, "Slab:           ",
+		    global_node_page_state(NR_SLAB_RECLAIMABLE) +
+		    global_node_page_state(NR_SLAB_UNRECLAIMABLE) + rem_mem.Slab);
+
+	show_val_kb(m, "SReclaimable:   ",
+		    global_node_page_state(NR_SLAB_RECLAIMABLE) + rem_mem.SReclaimable);
+	show_val_kb(m, "SUnreclaim:     ",
+		    global_node_page_state(NR_SLAB_UNRECLAIMABLE) + rem_mem.SUnreclaim);
+	seq_printf(m, "KernelStack:    %8lu kB\n",
+		   global_zone_page_state(NR_KERNEL_STACK_KB) + rem_mem.KernelStack);
+	show_val_kb(m, "PageTables:     ",
+		    global_zone_page_state(NR_PAGETABLE) + rem_mem.PageTables);
+#ifdef CONFIG_QUICKLIST
+	show_val_kb(m, "Quicklists:     ", quicklist_total_size() + rem_mem.Quicklists);
+#endif
+
+	show_val_kb(m, "NFS_Unstable:   ",
+		    global_node_page_state(NR_UNSTABLE_NFS) + rem_mem.NFS_Unstable);
+	show_val_kb(m, "Bounce:         ",
+		    global_zone_page_state(NR_BOUNCE) + rem_mem.Bounce);
+	show_val_kb(m, "WritebackTmp:   ",
+		    global_node_page_state(NR_WRITEBACK_TEMP) + rem_mem.WritebackTmp);
+	show_val_kb(m, "CommitLimit:    ", vm_commit_limit() + rem_mem.CommitLimit);
+	show_val_kb(m, "Committed_AS:   ", committed + rem_mem.Committed_AS);
+	seq_printf(m, "VmallocTotal:   %8lu kB\n",
+		   ((unsigned long)VMALLOC_TOTAL >> 10) + rem_mem.VmallocTotal);
+	show_val_kb(m, "VmallocUsed:    ", 0ul);
+	show_val_kb(m, "VmallocChunk:   ", 0ul);
+
+#ifdef CONFIG_MEMORY_FAILURE
+	seq_printf(m, "HardwareCorrupted: %5lu kB\n",
+		   (atomic_long_read(&num_poisoned_pages) << (PAGE_SHIFT - 10)) 
+		   + rem_mem.HardwareCorrupted);
+#endif
+
+#ifdef CONFIG_TRANSPARENT_HUGEPAGE
+	show_val_kb(m, "AnonHugePages:  ",
+		    global_node_page_state(NR_ANON_THPS) * HPAGE_PMD_NR);
+	show_val_kb(m, "ShmemHugePages: ",
+		    global_node_page_state(NR_SHMEM_THPS) * HPAGE_PMD_NR);
+	show_val_kb(m, "ShmemPmdMapped: ",
+		    global_node_page_state(NR_SHMEM_PMDMAPPED) * HPAGE_PMD_NR);
+#endif
+
+#ifdef CONFIG_CMA
+	show_val_kb(m, "CmaTotal:       ", totalcma_pages + rem_mem.CmaTotal);
+	show_val_kb(m, "CmaFree:        ",
+		    global_zone_page_state(NR_FREE_CMA_PAGES) + rem_mem.CmaFree);
+#endif
+#endif
 	hugetlb_report_meminfo(m);
 
 	arch_report_meminfo(m);
diff -uprN 4.14.79/fs/read_write.c 4.14.79_popcorn/fs/read_write.c
--- 4.14.79/fs/read_write.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/read_write.c	2020-05-24 22:41:30.570906054 -0400
@@ -563,10 +563,24 @@ static inline void file_pos_write(struct
 	file->f_pos = pos;
 }
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/syscall_server.h>
+#endif
+
 SYSCALL_DEFINE3(read, unsigned int, fd, char __user *, buf, size_t, count)
 {
-	struct fd f = fdget_pos(fd);
-	ssize_t ret = -EBADF;
+	struct fd f;
+	ssize_t ret;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		ret = redirect_read(fd, buf, count);
+		return ret;
+	}
+#endif
+	f = fdget_pos(fd);
+	ret = -EBADF;
 
 	if (f.file) {
 		loff_t pos = file_pos_read(f.file);
@@ -581,8 +595,18 @@ SYSCALL_DEFINE3(read, unsigned int, fd,
 SYSCALL_DEFINE3(write, unsigned int, fd, const char __user *, buf,
 		size_t, count)
 {
-	struct fd f = fdget_pos(fd);
-	ssize_t ret = -EBADF;
+	struct fd f;
+	ssize_t ret;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		ret = redirect_write(fd, buf, count);
+		return ret;
+	}
+#endif
+
+	f = fdget_pos(fd);
+	ret = -EBADF;
 
 	if (f.file) {
 		loff_t pos = file_pos_read(f.file);
@@ -1005,8 +1029,18 @@ static ssize_t vfs_writev(struct file *f
 static ssize_t do_readv(unsigned long fd, const struct iovec __user *vec,
 			unsigned long vlen, rwf_t flags)
 {
-	struct fd f = fdget_pos(fd);
-	ssize_t ret = -EBADF;
+	struct fd f;
+	ssize_t ret;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		ret = redirect_writev(fd, vec, vlen);
+		return ret;
+	}
+#endif
+
+	f = fdget_pos(fd);
+	ret = -EBADF;
 
 	if (f.file) {
 		loff_t pos = file_pos_read(f.file);
@@ -1483,6 +1517,13 @@ SYSCALL_DEFINE4(sendfile64, int, out_fd,
 	loff_t pos;
 	ssize_t ret;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		ret = redirect_sendfile64(out_fd, in_fd, offset, count);
+		return ret;
+	}
+#endif
+
 	if (offset) {
 		if (unlikely(copy_from_user(&pos, offset, sizeof(loff_t))))
 			return -EFAULT;
diff -uprN 4.14.79/fs/select.c 4.14.79_popcorn/fs/select.c
--- 4.14.79/fs/select.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/select.c	2020-05-24 22:41:30.578906029 -0400
@@ -34,6 +34,11 @@
 
 #include <linux/uaccess.h>
 
+#ifdef CONFIG_POPCORN
+#include <popcorn/syscall_server.h>
+#include <popcorn/types.h>
+#endif
+
 
 /*
  * Estimate expected accuracy in ns from a timeval.
@@ -681,7 +686,17 @@ SYSCALL_DEFINE5(select, int, n, fd_set _
 {
 	struct timespec64 end_time, *to = NULL;
 	struct timeval tv;
-	int ret;
+	int ret, error;
+
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		printk("Before redirect select");
+		error = redirect_select(n, inp, outp, exp, tvp);
+		printk("After redirect select");
+		SSPRINTK("Remote select return: %d\n", error);
+		return error;
+	}
+#endif
 
 	if (tvp) {
 		if (copy_from_user(&tv, tvp, sizeof(tv)))
diff -uprN 4.14.79/fs/stat.c 4.14.79_popcorn/fs/stat.c
--- 4.14.79/fs/stat.c	2018-11-04 08:52:51.000000000 -0500
+++ 4.14.79_popcorn/fs/stat.c	2020-05-24 22:41:30.578906029 -0400
@@ -20,6 +20,10 @@
 
 #include <linux/uaccess.h>
 #include <asm/unistd.h>
+#ifdef CONFIG_POPCORN
+#include <popcorn/types.h>
+#include <popcorn/syscall_server.h>
+#endif
 
 /**
  * generic_fillattr - Fill in the basic attributes from the inode struct
@@ -270,6 +274,7 @@ SYSCALL_DEFINE2(lstat, const char __user
 SYSCALL_DEFINE2(fstat, unsigned int, fd, struct __old_kernel_stat __user *, statbuf)
 {
 	struct kstat stat;
+
 	int error = vfs_fstat(fd, &stat);
 
 	if (!error)
@@ -371,8 +376,15 @@ SYSCALL_DEFINE4(newfstatat, int, dfd, co
 SYSCALL_DEFINE2(newfstat, unsigned int, fd, struct stat __user *, statbuf)
 {
 	struct kstat stat;
-	int error = vfs_fstat(fd, &stat);
+	int error;
 
+#ifdef CONFIG_POPCORN
+	if (distributed_remote_process(current)) {
+		error = redirect_fstat(fd, statbuf);
+		return error;
+	}
+#endif
+	error = vfs_fstat(fd, &stat);
 	if (!error)
 		error = cp_new_stat(&stat, statbuf);
 
